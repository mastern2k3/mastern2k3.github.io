<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blog on Gato Malo</title><link>https://gatomalo.dev/blog/</link><description>Recent content in Blog on Gato Malo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Feb 2022 01:09:28 +0200</lastBuildDate><atom:link href="https://gatomalo.dev/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Partial GraphQL models with pydantic</title><link>https://gatomalo.dev/blog/pydantic-graphql-client/</link><pubDate>Sat, 05 Feb 2022 01:09:28 +0200</pubDate><guid>https://gatomalo.dev/blog/pydantic-graphql-client/</guid><description>I was recently building a client for a GraphQL service in python and was faced with the problem of modelling the message types.
Since those are essentially json models, I turned to pydantic with which I had good experience in the past.
Although in theory this should be relatively simple, I encountered some annoying problems right off the bat.
Lets take trevorblades' country info GraphQL API for example.
Its schema type for Country looks like this:</description></item><item><title>Hugo Blog Makeover</title><link>https://gatomalo.dev/blog/blog-makeover/</link><pubDate>Wed, 10 Nov 2021 20:12:57 +0200</pubDate><guid>https://gatomalo.dev/blog/blog-makeover/</guid><description>For a while I wanted to refactor my blog website.
I initially built it using VuePress because I liked Vue, but, the trouble of maintaining the themes and underlying javascript quickly became more than I bargained for.
Since I follow the golang ecosystem closely, I stumbled upon Hugo. It looked easy enough to get my head around for my basic needs, while remaining extendable.
PaperMod and PaperMod-Nord Looking for some simple elegant themes I fell in love with the PaperMod theme.</description></item><item><title>Error Monitoring in Godot using Sentry</title><link>https://gatomalo.dev/blog/2020/03/21/error-monitoring-godot-sentry/</link><pubDate>Sat, 21 Mar 2020 19:53:04 +0200</pubDate><guid>https://gatomalo.dev/blog/2020/03/21/error-monitoring-godot-sentry/</guid><description>I&amp;rsquo;m a big fan of the Godot game engine, and lately, since players have been testing the game more often, I&amp;rsquo;ve decided to add some monitoring solution to get a better view of what&amp;rsquo;s failing players as they try to play.
In this post I&amp;rsquo;ll show how to integrate Sentry&amp;rsquo;s .Net SDK in Godot and use it to receive usage reports and error monitoring.
What&amp;rsquo;s Sentry? Sentry is an open-source error monitoring tool I picked up on a while ago.</description></item><item><title>Godot 3.2 and an Android Version</title><link>https://gatomalo.dev/blog/2020/03/09/godot32-android/</link><pubDate>Mon, 09 Mar 2020 00:25:54 +0200</pubDate><guid>https://gatomalo.dev/blog/2020/03/09/godot32-android/</guid><description>I&amp;rsquo;ve been waiting for the 3.2 version of godot to release for some time and alas it has, bringing with it the much needed support for Mono on Android.
Although playable on desktops, I&amp;rsquo;m very excited about the prospect of showcasing the game for potential testers on their mobiles.
Although technically a click away in the new Godot version, creating an Android version wasn&amp;rsquo;t easy, several mechanics broke and some didn&amp;rsquo;t make sense on a mobile and had to be upgraded.</description></item><item><title>Back in Control</title><link>https://gatomalo.dev/blog/2019/12/07/back-in-control/</link><pubDate>Sat, 07 Dec 2019 20:18:53 +0200</pubDate><guid>https://gatomalo.dev/blog/2019/12/07/back-in-control/</guid><description>As discussed in the previous post, the subject of this latest version is improving controls.
Player selection Clicking or dragging a player character now causes selection, meaning their skill bar will appear.
In addition, many players tried right-clicking the ground as a means of commanding a move, just as expected in almost every RTS, so I also added a much expected right-click move command.
Ability range indication Trying to use a range limited ability now shows the player&amp;rsquo;s required proximity.</description></item><item><title>My Items Bring All the Boys to the Yard</title><link>https://gatomalo.dev/blog/2019/09/10/my-items-bring-all-the-boys-to-the-yard/</link><pubDate>Tue, 10 Sep 2019 18:48:56 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/09/10/my-items-bring-all-the-boys-to-the-yard/</guid><description>As promised back in June, I&amp;rsquo;ve refactored the whole collectible item aspect.
The server holds configurable rules that determine which and at what rate items drop from enemies and makes them sprout from monsters accordingly.
Other than that, at the moment, collecting items doesn&amp;rsquo;t really do anything in terms of gameplay.
Although, just like monster kills, collected items are recorded and displayed on the demo match board so be sure to check your spoils.</description></item><item><title>Test demo is a Go</title><link>https://gatomalo.dev/blog/2019/08/12/demo-is-a-go/</link><pubDate>Mon, 12 Aug 2019 19:19:39 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/08/12/demo-is-a-go/</guid><description>At last I&amp;rsquo;ve managed to stabilize the client and make it playable.
I ended up adding a lot of new stuff on the server side as well - match recording, an API and a webpage to show off match results.
After downloading and playing the demo you can see your match results in the listing displayed below and in the dedicated page here.
This is a very early take on the concept and is offered here as nothing more than a way to get early feedback from testers and curious gamers about controls, mechanics and the overall concept of a tactics rpg.</description></item><item><title>Time to Play</title><link>https://gatomalo.dev/blog/2019/07/21/time-to-play/</link><pubDate>Sun, 21 Jul 2019 18:19:37 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/07/21/time-to-play/</guid><description>The last week was a fun milestone. Up until recently, although the game was playable, you couldn&amp;rsquo;t really get the characters to do what you had in mind for them.
A few behaviors expected from an RTS were missing:
After executing an ability on an enemy the character would stand idle.
The expected behavior is to continue with the default auto attack which is what I ended up implementing.</description></item><item><title>Buffs, buffs everywhere</title><link>https://gatomalo.dev/blog/2019/06/28/buffs-everywhere/</link><pubDate>Fri, 28 Jun 2019 14:10:00 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/06/28/buffs-everywhere/</guid><description>The task of adding character buffs to the game required adding some cool complexities to the state engine, including stat effects, allowing transient alterations to the character&amp;rsquo;s stats, and state slots enabling characters to act-out multiple effects at a time.
Buff system and triggers The buff system took much thinking but little actual code, I ended up designing it as part of the already existing character state machine module.
The task leading to adding the buff system was implementing an &amp;ldquo;enrage&amp;rdquo; mechanic, causing an enemy to apply a buff to himself when it&amp;rsquo;s hp falls under a certain amount, for that, I added trigger semantics allowing me to implement various types of triggers.</description></item><item><title>Moving Around</title><link>https://gatomalo.dev/blog/2019/06/08/moving-around/</link><pubDate>Sat, 08 Jun 2019 12:09:01 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/06/08/moving-around/</guid><description>I haven&amp;rsquo;t had a lot of time to spend on ToM development but here&amp;rsquo;s what&amp;rsquo;s new.
Map panning I was glad adding panning, it&amp;rsquo;s one of those features that when added, even though small, make the overall experience much closer to what you had in mind.
This also opens the door to larger maps, one of my next big tasks on the board.
Support enemies I&amp;rsquo;ve added some more complexity to playbooks - allowing for enemy actors to interact with each other.</description></item><item><title>Three months in</title><link>https://gatomalo.dev/blog/2019/06/08/three-months-in/</link><pubDate>Sat, 08 Jun 2019 10:15:27 +0300</pubDate><guid>https://gatomalo.dev/blog/2019/06/08/three-months-in/</guid><description>I figured it&amp;rsquo;s time to start recording what I&amp;rsquo;m up to with Throne of Mithrill, so, here it goes.
Although C# has been giving me a lot of trouble I&amp;rsquo;ve managed to design things stable enough to start putting in some of the basic mechanics, although I might need to port everything to either Rust or Go.
First were the movement and engagement &amp;ldquo;orders&amp;rdquo; (as they once were called) got implemented.</description></item></channel></rss>