[{"content":" I\u0026rsquo;m a big fan of the Godot game engine, and lately, since players have been testing the game more often, I\u0026rsquo;ve decided to add some monitoring solution to get a better view of what\u0026rsquo;s failing players as they try to play.\nIn this post I\u0026rsquo;ll show how to integrate Sentry\u0026rsquo;s .Net SDK in Godot and use it to receive usage reports and error monitoring.\nWhat\u0026rsquo;s Sentry? Sentry is an open-source error monitoring tool I picked up on a while ago.\nI initially started using it because it was open-source and I was quite the cheapskate, but, it really is an awesome and visually delightful tool.\nAside from collecting error reports and alerting you when the application fails, it makes it simple to integrate information and events you care about in those reports. Also, it\u0026rsquo;s fairly easy to integrate and get started collecting data with, even if you\u0026rsquo;re not that much of a friend to coding.\nSo, if you want a dashboard filled with reports about how your game crashed, to who, why and what were they doing leading to the crash, keep reading.\nDependencies First, let\u0026rsquo;s grab the required binaries. Installing the Sentry SDK collects a few other assemblies so I added all of them to one packages.config for convenience:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;packages\u0026gt; \u0026lt;package id=\u0026#34;Sentry\u0026#34; version=\u0026#34;2.1.0\u0026#34; targetFramework=\u0026#34;net45\u0026#34; /\u0026gt; \u0026lt;package id=\u0026#34;Sentry.Protocol\u0026#34; version=\u0026#34;2.1.0\u0026#34; targetFramework=\u0026#34;net45\u0026#34; /\u0026gt; \u0026lt;package id=\u0026#34;Sentry.PlatformAbstractions\u0026#34; version=\u0026#34;1.1.0.0\u0026#34; targetFramework=\u0026#34;net45\u0026#34; /\u0026gt; \u0026lt;package id=\u0026#34;System.Collections.Immutable\u0026#34; version=\u0026#34;1.5.0\u0026#34; targetFramework=\u0026#34;net45\u0026#34; /\u0026gt; \u0026lt;/packages\u0026gt; Run NuGet to fetch all those into your project\u0026rsquo;s ./packages/ folder.\n$ mono nuget.exe restore  If you don\u0026rsquo;t have NuGet yet you can grab it here.\nThe Windows x86 Commandline version is runnable using mono.\n Add references to the Sentry assemblies to your project:\n\u0026lt;ItemGroup\u0026gt; \u0026lt;Reference Include=\u0026#34;Sentry, Version=2.1.0.0\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;$(ProjectDir)/packages/Sentry.2.1.0/lib/net461/Sentry.dll\u0026lt;/HintPath\u0026gt; \u0026lt;Private\u0026gt;True\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; \u0026lt;Reference Include=\u0026#34;Sentry.Protocol, Version=2.1.0.0\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;$(ProjectDir)/packages/Sentry.Protocol.2.1.0/lib/net46/Sentry.Protocol.dll\u0026lt;/HintPath\u0026gt; \u0026lt;Private\u0026gt;True\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; \u0026lt;Reference Include=\u0026#34;Sentry.PlatformAbstractions, Version=1.1.0.0\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;$(ProjectDir)/packages/Sentry.PlatformAbstractions.1.1.0/lib/net471/Sentry.PlatformAbstractions.dll\u0026lt;/HintPath\u0026gt; \u0026lt;Private\u0026gt;True\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; \u0026lt;Reference Include=\u0026#34;System.Collections.Immutable, Version=1.2.3.0\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;$(ProjectDir)/packages/System.Collections.Immutable.1.5.0/lib/portable-net45+win8+wp8+wpa81/System.Collections.Immutable.dll\u0026lt;/HintPath\u0026gt; \u0026lt;Private\u0026gt;True\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; \u0026lt;/ItemGroup\u0026gt; Initialization Using Godot we don\u0026rsquo;t really have an initialization section so I created a dedicated node (here as SentryController) to hold the Sentry initialization logic.\n Pay close attention to the node placement in the scene tree.\nThe Sentry controller node must come before any application nodes. Godot invokes their _Ready() methods according to their ordering on the tree, and any exception thrown before SDK init will not be reported.\n After creating an account and a project Sentry will suggest an initialization clause with your project\u0026rsquo;s Dsn, similar to this:\nusing (SentrySdk.Init(\u0026#34;https://451cf9b0fd9e4f0294a0d15b6c36bce2@sentry.io/5170198\u0026#34;)) { // App code }  After creating a project this page will contain code examples with your project\u0026rsquo;s Dsn in place.\n So after adding it to your node it should look somewhat like this.\npublic class SentryController : Node { public override void _Ready() { SentrySdk.Init(o =\u0026gt; { o.Dsn = new Dsn(\u0026#34;https://451cf9b0fd9e4f0294a0d15b6c36bce2@sentry.io/5170198\u0026#34;); }); } } Error reporting Now that the client is set up, any unhandled exceptions thrown will get reported to the sentry API, and appear on your dashboard with a full trace.\nFor example, lets set a button that throws an exception:\npublic class App : Node2D { private void _on_CrashButton_pressed() { throw new Exception(\u0026#34;Oh lord jesus it\u0026#39;s a fire!\u0026#34;); } } Which after getting pressed will cause an error to appear on your issue dashboard.\nBreadcrumbs A neat feature of Sentry that I had to cover.\nThis allows you to log the user\u0026rsquo;s behavior, potentially, leading to the error. Giving you a better view into what exactly happened before the crash.\nThe code is fairly simple, for example, lets log a button click (exciting, I know :P).\npublic class App : Node2D { ... private void _on_AwesomeButton_pressed() { SentrySdk.AddBreadcrumb(\u0026#34;Awesome button clicked\u0026#34;); } } After a few clicks on this button, and then, a hit to the ol' crashing button, we\u0026rsquo;ll get this neat report:\nExample Project I\u0026rsquo;ve prepared an example project demonstrating the Sentry integration here:\nhttps://github.com/mastern2k3/godot-sentry-example\nThere is a small caveat for people looking to export for Android, read ahead.\nAndroid Although making all this goodness to work on Android should\u0026rsquo;ve been an export prest away, things turned out to be trickier.\nThe Android prest kept failing the mono assembly preparation phase because of an apparent missing assembly named System.Web.\nERROR: get_assembly_dependencies: Cannot load assembly (refonly): 'System.Web'. At: modules/mono/editor/godotsharp_export.cpp:93. ERROR: get_assembly_dependencies: Cannot load one of the dependencies for the assembly: 'Sentry'. At: modules/mono/editor/godotsharp_export.cpp:98. Finding the answer to this little bugger took me a good two days of research, trial and error, so I\u0026rsquo;ll cut to the chase.\nAfter digging through the .Net Sentry SDK I found out that the System.Web assembly (required by the net461 variant of the Sentry.dll assembly) is not a strict requirement, and that on other framework outputs its reference is omitted.\nSo, on the last trial, I ended up forking the SDK in an attempt to produce a Sentry.dll that did not reference System.Web.\nYou can download a compiled version of it here.\nImportant: The example project references the compiled fork version so it appears as such in the .csproj file:\n\u0026lt;Reference Include=\u0026#34;Sentry, Version=2.1.0.0\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;$(ProjectDir)/../forks/sentry-dotnet/src/Sentry/bin/Release/net461/Sentry.dll\u0026lt;/HintPath\u0026gt; \u0026lt;!-- \u0026lt;HintPath\u0026gt;$(ProjectDir)/packages/Sentry.2.1.0/lib/net461/Sentry.dll\u0026lt;/HintPath\u0026gt; --\u0026gt; \u0026lt;Private\u0026gt;True\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; If you\u0026rsquo;re not interested in any of this Android nonsense you can comment / uncomment whichever line fits your needs.\nOther Sentry related stuff you should check out   Sentry Scopes - these enable you to add more info (like user identification) as application usage progresses.\n  Self hosting Sentry - yeah, you can do that.\n  ","permalink":"https://gatomalo.dev/blog/2020/03/21/error-monitoring-godot-sentry/","summary":"I\u0026rsquo;m a big fan of the Godot game engine, and lately, since players have been testing the game more often, I\u0026rsquo;ve decided to add some monitoring solution to get a better view of what\u0026rsquo;s failing players as they try to play.\nIn this post I\u0026rsquo;ll show how to integrate Sentry\u0026rsquo;s .Net SDK in Godot and use it to receive usage reports and error monitoring.\nWhat\u0026rsquo;s Sentry? Sentry is an open-source error monitoring tool I picked up on a while ago.","title":"Error Monitoring in Godot using Sentry"},{"content":"I\u0026rsquo;ve been waiting for the 3.2 version of godot to release for some time and alas it has, bringing with it the much needed support for Mono on Android.\nAlthough playable on desktops, I\u0026rsquo;m very excited about the prospect of showcasing the game for potential testers on their mobiles.\nAlthough technically a click away in the new Godot version, creating an Android version wasn\u0026rsquo;t easy, several mechanics broke and some didn\u0026rsquo;t make sense on a mobile and had to be upgraded.\nDraggable Ability Casts One issue with making the Android port feature complete compared to the current versions had to to with casting abilities.\nAn important part of casting abilities is being able to position them well, making sure the cast will affect certain enemies or friends, which was made possible with the mouse hover.\nIn order to replicate this ability I had to introduce a new behavior, allowing a cast command with a drag motion.\nThe results were way better than expected, this kind of control is exactly what I\u0026rsquo;ve been hoping for!\nAs mentioned before, I would gladly appreciate any kind of feedback, either here or on itch.io.\nThrone of Mithril by Nitzan  ","permalink":"https://gatomalo.dev/blog/2020/03/09/godot32-android/","summary":"I\u0026rsquo;ve been waiting for the 3.2 version of godot to release for some time and alas it has, bringing with it the much needed support for Mono on Android.\nAlthough playable on desktops, I\u0026rsquo;m very excited about the prospect of showcasing the game for potential testers on their mobiles.\nAlthough technically a click away in the new Godot version, creating an Android version wasn\u0026rsquo;t easy, several mechanics broke and some didn\u0026rsquo;t make sense on a mobile and had to be upgraded.","title":"Godot 3.2 and an Android Version"},{"content":"As discussed in the previous post, the subject of this latest version is improving controls.\nPlayer selection Clicking or dragging a player character now causes selection, meaning their skill bar will appear.\nIn addition, many players tried right-clicking the ground as a means of commanding a move, just as expected in almost every RTS, so I also added a much expected right-click move command.\nAbility range indication Trying to use a range limited ability now shows the player\u0026rsquo;s required proximity.\nIssuing an out-of-range action will result in the character first, reaching required proximity, and only then, executing the cast.\nAuto panning Although simple and not entirely tested, I\u0026rsquo;ve added automatic panning so the camera follows the average point between all player characters.\nI feel it is a net positive that needs further tweaks, that\u0026rsquo;s overall better than the manual way. It still leaves an unsolved problem of sometimes requiring a manual way of controlling the viewport, but, I guess that\u0026rsquo;ll have to be fixed later when I have more feedback and better solutions.\nThe \u0026ldquo;Book of Kek\u0026rdquo; was acquired! As introduced in the last version, enemies now drop items. And I am proud to announce that the rarest, among the ones released, has been acquired, courtesy of Taiwan!\nI didn\u0026rsquo;t intend on this item being a rarity, but, since most testers don\u0026rsquo;t manage past the first group of enemies, reaching the \u0026ldquo;Old Yeller\u0026rdquo; and getting the book was a happy moment for me.\nThis accomplishment as well as all recently played matches and their results are available for browsing on the match board.\nHopefully this new version will get new player past the hump of needing to pan the viewport.\nComing Next, Balancing, Survival Mode Now that the major control issues are addressed I can showcase the game to less forgiving players (without them tripping on the minor control problems).\nSo, unless some major issues arise from feedback, I\u0026rsquo;ll be focusing on gameplay.\n  Balancing - Although I\u0026rsquo;m still unsure how to approach it, the skills and open variables in the game are still unbalanced. A great example of this is the fireball skill of the wizard, easily taking down enemies from afar without risking too much.\nHopefully implementing a survival mode will make it easier to prototype balancing those variables.\n  Survival Mode - As mentioned in the last post, and for the sake of more easily testing and balancing gameplay, I\u0026rsquo;ll be implementing a survival type map where waves of enemies approach the characters in the middle, with the end goal of surviving as long as possible.\n  As mentioned before, I would gladly appreciate any kind of feedback, either here or on itch.io.\nThrone of Mithril by Nitzan  ","permalink":"https://gatomalo.dev/blog/2019/12/07/back-in-control/","summary":"As discussed in the previous post, the subject of this latest version is improving controls.\nPlayer selection Clicking or dragging a player character now causes selection, meaning their skill bar will appear.\nIn addition, many players tried right-clicking the ground as a means of commanding a move, just as expected in almost every RTS, so I also added a much expected right-click move command.\nAbility range indication Trying to use a range limited ability now shows the player\u0026rsquo;s required proximity.","title":"Back in Control"},{"content":"As promised back in June, I\u0026rsquo;ve refactored the whole collectible item aspect.\nThe server holds configurable rules that determine which and at what rate items drop from enemies and makes them sprout from monsters accordingly.\nOther than that, at the moment, collecting items doesn\u0026rsquo;t really do anything in terms of gameplay.\nAlthough, just like monster kills, collected items are recorded and displayed on the demo match board so be sure to check your spoils.\nNext up, better controls, survival map In the last few weeks I\u0026rsquo;ve gathered a hefty list of broken controls which will be next on my plate:\n  Player selection - Currently a click on a player character causes it to both get selected and move. This causes a cancellation of the last given order (usually attacking) which is very annoying. A fix for that is coming soon.\n  Auto panning - Currently panning the game map is available only through the top-left joystick. This is both inconvenient and slow, so, next I\u0026rsquo;ll be experimenting with automatic panning, following the characters and enemies in a center-of-attention manner.\n  Ability range indication - Although some abilities have a maximum cast range to them, this is not reflected in the UI, making out-of-range ability commands not work, without any indication to why.\n  Annoying health bars - Currently, health bars are displayed above all characters, at all times. This is highly inconvenient and will be one of the next things I\u0026rsquo;ll be dealing with.\n  As to the starting map mentioned before, it appears to may take more time to build than I\u0026rsquo;ve thought. Therefore, as a milestone before that, I\u0026rsquo;ll be implementing a survival type map where waves of enemies approach the two characters in the middle, with the end goal of surviving as long as possible.\nAs mentioned before, I would gladly appreciate any kind of feedback, either here or on itch.io.\nThrone of Mithril by Nitzan  ","permalink":"https://gatomalo.dev/blog/2019/09/10/my-items-bring-all-the-boys-to-the-yard/","summary":"As promised back in June, I\u0026rsquo;ve refactored the whole collectible item aspect.\nThe server holds configurable rules that determine which and at what rate items drop from enemies and makes them sprout from monsters accordingly.\nOther than that, at the moment, collecting items doesn\u0026rsquo;t really do anything in terms of gameplay.\nAlthough, just like monster kills, collected items are recorded and displayed on the demo match board so be sure to check your spoils.","title":"My Items Bring All the Boys to the Yard"},{"content":"At last I\u0026rsquo;ve managed to stabilize the client and make it playable.\nI ended up adding a lot of new stuff on the server side as well - match recording, an API and a webpage to show off match results.\nAfter downloading and playing the demo you can see your match results in the listing displayed below and in the dedicated page here.\nThis is a very early take on the concept and is offered here as nothing more than a way to get early feedback from testers and curious gamers about controls, mechanics and the overall concept of a tactics rpg.\nI would gladly appreciate any kind of feedback, either here or on itch.io.\nThrone of Mithril by Nitzan  ","permalink":"https://gatomalo.dev/blog/2019/08/12/demo-is-a-go/","summary":"At last I\u0026rsquo;ve managed to stabilize the client and make it playable.\nI ended up adding a lot of new stuff on the server side as well - match recording, an API and a webpage to show off match results.\nAfter downloading and playing the demo you can see your match results in the listing displayed below and in the dedicated page here.\nThis is a very early take on the concept and is offered here as nothing more than a way to get early feedback from testers and curious gamers about controls, mechanics and the overall concept of a tactics rpg.","title":"Test demo is a Go"},{"content":"The last week was a fun milestone. Up until recently, although the game was playable, you couldn\u0026rsquo;t really get the characters to do what you had in mind for them.\nA few behaviors expected from an RTS were missing:\n  After executing an ability on an enemy the character would stand idle.\nThe expected behavior is to continue with the default auto attack which is what I ended up implementing.\n  After killing an enemy the character would always stand idle.\nThis is pretty much the expected behavior except in the common scenario where there are still nearby enemies, in which case it should continue attacking the next nearby enemy.\n  On top of those, combat parameters like damage, healing done and cooldown times were never given more than an afterthought.\nTo get those in order, while spending as little time as possible on development tasks I had to implement some tooling.\nHot reloading Since most of the game logic is taking place on the server, tuning combat parameters and repositioning characters created the constant hurdle of re-deploying the server, so, in order to prototype more rapidly I ended up implementing two hot reloading features allowing me to prototype while avoiding re-deployment.\nMap reloading Although I did not mention this before, the way the server knows how to instantiate a map is through loading the map scene file from the game editor. So until I settle on a more dynamic solution, the map has to be prepackaged with the server deployment.\nUntil I implement a more complete solution for server map loading I added a debug map loading RPC, allowing me to hot-load an alternative map to the main map to be used by the server without having to restart it.\nCharacter definition reloading All characters on the map are loaded through character \u0026ldquo;templates\u0026rdquo; that, until recently, were hard-coded in the server. Again, forcing me to restart the server to implement changes.\nHere I wanted more leeway. I wanted to be able to change character specifications way more rapidly because I\u0026rsquo;m predicting a lot of minute tuning will be required for those, possibly during an active match.\nThat required two things:\n  Character \u0026ldquo;templates\u0026rdquo; should be serializable to allow editing and transmission while the server is up. I landed on a simple JSON containing all parameters.\n  A server RPC allowing the injection and re-instantiation of new character \u0026ldquo;templates\u0026rdquo; while a match is running.\n  To make the solution more complete I also ended up developing a helper tool that, when directed, watches a local file for changes and injects the new contents to the server.\nAll this required a lot of work but the end result is satisfying.\nAdditional progress   Breakthrough with native client\nAlthough I\u0026rsquo;ve overcome most problems with Godot\u0026rsquo;s C# runtime, there\u0026rsquo;s no denying the benefits of a native build. In the past few weeks I\u0026rsquo;ve managed to successfully tie up my critical dependencies (WebSockets, OpenAPI and Godot) under Rust using the godot-rust native tool repo, ensuring that door is open.\n  Dedicated server\nAs the first step toward publishing a playable \u0026ldquo;test-demo\u0026rdquo; I\u0026rsquo;ve set up a dedicated ToM server ready to host matches. The server is working perfectly and in the next week or so I\u0026rsquo;ll publish a \u0026ldquo;test-demo\u0026rdquo; allowing me and curious gamers to showcase and test the game mechanics.\n  Self targeting abilities - As part of adding a new \u0026ldquo;Shield\u0026rdquo; ability, I\u0026rsquo;ve implemented self targeting logic to enable abilities targeted at the caster.\n  Next up   Test demo - A playable demo designed toward showcasing and testing game mechanics on top of the new dedicated server.\n  Start map - Now that the base mechanics are working well I\u0026rsquo;ve begun to work on the starting map, which will contain an introductory cutscene some basic battle situations and the first miniboss.\nGod I\u0026rsquo;m excited.\n  ","permalink":"https://gatomalo.dev/blog/2019/07/21/time-to-play/","summary":"The last week was a fun milestone. Up until recently, although the game was playable, you couldn\u0026rsquo;t really get the characters to do what you had in mind for them.\nA few behaviors expected from an RTS were missing:\n  After executing an ability on an enemy the character would stand idle.\nThe expected behavior is to continue with the default auto attack which is what I ended up implementing.","title":"Time to Play"},{"content":"The task of adding character buffs to the game required adding some cool complexities to the state engine, including stat effects, allowing transient alterations to the character\u0026rsquo;s stats, and state slots enabling characters to act-out multiple effects at a time.\nBuff system and triggers The buff system took much thinking but little actual code, I ended up designing it as part of the already existing character state machine module.\nThe task leading to adding the buff system was implementing an \u0026ldquo;enrage\u0026rdquo; mechanic, causing an enemy to apply a buff to himself when it\u0026rsquo;s hp falls under a certain amount, for that, I added trigger semantics allowing me to implement various types of triggers.\nTrigger semantics were designed with boss encounters in mind so that bosses could play out different phases of an encounter based on different triggers.\nStat effects Although currently the damage inflicted by melee attacks is a simple flat value associated with the character, I wanted to add a semantic allowing me to apply a transient change to it.\nStat effects simply allow for the adding / removing of stat altering components that trigger a recalculation of the character\u0026rsquo;s effective stats when applied.\nThe \u0026ldquo;enrage\u0026rdquo; buff described above uses a stat effect, adding 15 melee damage to the effected character.\nOn-the-fly character creation This might not look too glamorous but it is an important milestone for cooler features I want to have, like:\n Bosses summoning adds Enemy \u0026ldquo;Nests\u0026rdquo; that keep spawning enemies unless destroyed Character abilities that spawn allies  Small Changes   Version imprint - Build process now \u0026ldquo;watermarks\u0026rdquo; a version string based on version control tags and hashes, visible also on the client display.\n  Heals cause aggro - Friendly heals cause aggro to nearby enemies and may redirect attention to the healer.\n  Cast breaking - Cast-breaking semantics now enable abilities and buffs to break spell-casting.\n  ","permalink":"https://gatomalo.dev/blog/2019/06/28/buffs-everywhere/","summary":"The task of adding character buffs to the game required adding some cool complexities to the state engine, including stat effects, allowing transient alterations to the character\u0026rsquo;s stats, and state slots enabling characters to act-out multiple effects at a time.\nBuff system and triggers The buff system took much thinking but little actual code, I ended up designing it as part of the already existing character state machine module.\nThe task leading to adding the buff system was implementing an \u0026ldquo;enrage\u0026rdquo; mechanic, causing an enemy to apply a buff to himself when it\u0026rsquo;s hp falls under a certain amount, for that, I added trigger semantics allowing me to implement various types of triggers.","title":"Buffs, buffs everywhere"},{"content":"I haven\u0026rsquo;t had a lot of time to spend on ToM development but here\u0026rsquo;s what\u0026rsquo;s new.\nMap panning I was glad adding panning, it\u0026rsquo;s one of those features that when added, even though small, make the overall experience much closer to what you had in mind.\nThis also opens the door to larger maps, one of my next big tasks on the board.\nSupport enemies I\u0026rsquo;ve added some more complexity to playbooks - allowing for enemy actors to interact with each other. Currently I have an \u0026ldquo;Evil Wizard\u0026rdquo; that locks on a nearby ally and spam-heals it with the \u0026ldquo;Healing Winds\u0026rdquo; ability - previously only used by player actors.\nWhile hacking to implement this I also noticed I end up spending a large amount of time writing character querying logic code (i.e. get all enemy characters in proximity, get ally characters, etc.), so I added character querying abstractions making things easier.\nNext up   Enraged enemies - Will require playbook trigger functionality and a basic buff system.\n  Classic map - A nicer looking map, enemy placement and playbooks as a draft for a \u0026ldquo;classic\u0026rdquo; enemy engagement.\nI expect this to take a while since currently all combat related variables are arbitrary (range, damage, HP, etc.).\n  ","permalink":"https://gatomalo.dev/blog/2019/06/08/moving-around/","summary":"I haven\u0026rsquo;t had a lot of time to spend on ToM development but here\u0026rsquo;s what\u0026rsquo;s new.\nMap panning I was glad adding panning, it\u0026rsquo;s one of those features that when added, even though small, make the overall experience much closer to what you had in mind.\nThis also opens the door to larger maps, one of my next big tasks on the board.\nSupport enemies I\u0026rsquo;ve added some more complexity to playbooks - allowing for enemy actors to interact with each other.","title":"Moving Around"},{"content":"I figured it\u0026rsquo;s time to start recording what I\u0026rsquo;m up to with Throne of Mithrill, so, here it goes.\nAlthough C# has been giving me a lot of trouble I\u0026rsquo;ve managed to design things stable enough to start putting in some of the basic mechanics, although I might need to port everything to either Rust or Go.\nFirst were the movement and engagement \u0026ldquo;orders\u0026rdquo; (as they once were called) got implemented.\nThen, the server and aggression system, allowing enemy mobs to strike back when a player entered proximity.\nIf you\u0026rsquo;re observant enough you\u0026rsquo;ll notice the exclamation effect over the enemy knight guy\u0026rsquo;s head as he approaches the player and a focusing circle on the triggering player.\nThe exclamation mark came in as an indication I put in to test the message was being processed correctly, I added the rotating circle later to emphasize and alarm the player.\nIt was important for me that the game would be built designed around the multiplayer experience, so, synchronization and match authorization came almost immediately.\nSince at this point the characters' ownership is given semi-randomly by the server, I found it helpful to add ownership indicators, however crude.\nYou can also notice the movement, auto-attack and auto-heal command interface.\nThe like will snap and change colors according to the default offensive / supportive ability of a character (in case they have one) or blue for simple movement.\nAside from the default offensive / supportive auto-abilities (which could later be selected by the player), characters can also use actionable abilities.\nI started with a simple circular AOE as a proof of concept but more will come.\nA casting system is also in place, enforcing a vulnerability when casting.\nMore things in the works   Aggro system - Although it\u0026rsquo;s hard to notice there is an aggro system I\u0026rsquo;m work-shopping.\nDamage afflictions and heals cause enemies to redirect their attention. It is very sensitive at the moment, causing redirections too often.\n  Looting system - You might have noticed enemies dropping coins when they die or the coins in the middle of the screen, those are collectible and a recent refactoring caused the characters to stop collecting them. Later enemies will drop other kinds of loot and one-time usables.\n  Enemy playbooks - When engaged, enemies execute a \u0026ldquo;playbook\u0026rdquo; - a highly customizable and pluggable state machine.\nCurrently said state machines are very simple, enemies start auto-attacking their aggressor and use an ability periodically, but, soon I want to add enemy healers which will put my design to the test.\n  Trajectory   Platforms - I still have a lot to figure out regarding Godot. C# has been giving me trouble, so I\u0026rsquo;m looking into utilizing the GDNative bindings with either Go or Rust.\n  Complex playbooks - Enemies are not really threatening at the moment, so I want to introduce a support-type enemy and an enrage mechanic.\n  Buff system - As part of introducing an enrage mechanic I\u0026rsquo;ll be adding a basic buff system, allowing me to apply effects for variable periods of time.\n  Bosses - Once the buff system and new playbooks are in place I\u0026rsquo;ll start experimenting with more complex maps and bosses.\nI am set to build a team-oriented game and I want bosses to play an important role, soon I\u0026rsquo;ll be posting some drafts for the first boss encounter.\n  ","permalink":"https://gatomalo.dev/blog/2019/06/08/three-months-in/","summary":"I figured it\u0026rsquo;s time to start recording what I\u0026rsquo;m up to with Throne of Mithrill, so, here it goes.\nAlthough C# has been giving me a lot of trouble I\u0026rsquo;ve managed to design things stable enough to start putting in some of the basic mechanics, although I might need to port everything to either Rust or Go.\nFirst were the movement and engagement \u0026ldquo;orders\u0026rdquo; (as they once were called) got implemented.","title":"Three months in"},{"content":"Demo Match Board This page used to display the recent matches of my now discontinued game called Throne of Mithril.\nSorry about that :(\n","permalink":"https://gatomalo.dev/throne/results/","summary":"Demo Match Board This page used to display the recent matches of my now discontinued game called Throne of Mithril.\nSorry about that :(","title":""},{"content":" Hi! I\u0026rsquo;m Nitzan 👋\nI\u0026rsquo;ve been in front of computer screens ever since I can remember myself.\nMeeting with my friends just to sit together in the study and watch them play StarCraft.\nI got into programming rather early, during 4th grade my mom signed me up for an after school class labeled \u0026ldquo;come build computer games with VisualBasic 6!\u0026quot;, a blatant lie, but nonetheless, I learned to program and got hooked.\nIt has become exponentially worse since then, to the point where I have a program generate my CV out of a configuration file.\nGame development Although I\u0026rsquo;ve always been interested in game development, experimenting with engines and building nonsense games, I owe my newfound passion of game dev to my friends - my nakamas.\nTwo years ago, me and my friends got committed in becoming a successful game studio.\nIt started with a weekly meetup where we\u0026rsquo;d discuss technology, workshop game ideas and prototype them, and slowly became a hardened supportive team aimed at becoming world renowned.\nThis blog is an attempt at documenting my private endeavors and team efforts in the adventure of building awesome games.\nThe cat The cat\u0026rsquo;s name is Sumsum and he\u0026rsquo;s going through a phase.\n","permalink":"https://gatomalo.dev/about/","summary":"Hi! I\u0026rsquo;m Nitzan 👋\nI\u0026rsquo;ve been in front of computer screens ever since I can remember myself.\nMeeting with my friends just to sit together in the study and watch them play StarCraft.\nI got into programming rather early, during 4th grade my mom signed me up for an after school class labeled \u0026ldquo;come build computer games with VisualBasic 6!\u0026quot;, a blatant lie, but nonetheless, I learned to program and got hooked.","title":"About Me"}]