<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>error monitoring on Gato Malo</title><link>https://gatomalo.dev/tags/error-monitoring/</link><description>Recent content in error monitoring on Gato Malo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Mar 2020 19:53:04 +0200</lastBuildDate><atom:link href="https://gatomalo.dev/tags/error-monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Monitoring in Godot using Sentry</title><link>https://gatomalo.dev/blog/2020/03/21/error-monitoring-godot-sentry/</link><pubDate>Sat, 21 Mar 2020 19:53:04 +0200</pubDate><guid>https://gatomalo.dev/blog/2020/03/21/error-monitoring-godot-sentry/</guid><description>I&amp;rsquo;m a big fan of the Godot game engine, and lately, since players have been testing the game more often, I&amp;rsquo;ve decided to add some monitoring solution to get a better view of what&amp;rsquo;s failing players as they try to play.
In this post I&amp;rsquo;ll show how to integrate Sentry&amp;rsquo;s .Net SDK in Godot and use it to receive usage reports and error monitoring.
What&amp;rsquo;s Sentry? Sentry is an open-source error monitoring tool I picked up on a while ago.</description></item></channel></rss>